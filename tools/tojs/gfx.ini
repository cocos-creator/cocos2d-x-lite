[gfx]
# the prefix to be added to the generated functions. You might or might not use this in your own
# templates
prefix = gfx

# create a target namespace (in javascript, this would create some code like the equiv. to `ns = ns || {}`)
# all classes will be embedded in that namespace
target_namespace = gfx

macro_judgement  =

android_headers =

android_flags = -target armv7-none-linux-androideabi -D_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS -DANDROID -D__ANDROID_API__=14 -gcc-toolchain %(gcc_toolchain_dir)s --sysroot=%(androidndkdir)s/platforms/android-14/arch-arm  -idirafter %(androidndkdir)s/sources/android/support/include -idirafter %(androidndkdir)s/sysroot/usr/include -idirafter %(androidndkdir)s/sysroot/usr/include/arm-linux-androideabi -idirafter %(clangllvmdir)s/lib64/clang/5.0/include -I%(androidndkdir)s/sources/cxx-stl/llvm-libc++/include

clang_headers =
clang_flags = -nostdinc -x c++ -std=c++11 -fsigned-char -U__SSE__

cocos_headers = -I%(cocosdir)s/cocos -I%(cocosdir)s/cocos/renderer -I%(cocosdir)s/cocos/renderer/core -I%(cocosdir)s/cocos/renderer/gfx-gles2 -I%(cocosdir)s/cocos/math -I%(cocosdir)s/cocos/platform/android -I%(cocosdir)s/external/source
cocos_flags = -DANDROID

cxxgenerator_headers =

# extra arguments for clang
extra_arguments = %(android_headers)s %(clang_headers)s %(cxxgenerator_headers)s %(cocos_headers)s %(android_flags)s %(clang_flags)s %(cocos_flags)s %(extra_flags)s

# what headers to parse
headers = %(cocosdir)s/cocos/renderer/gfx-gles2/GFXGLES2.h

replace_headers =

# what classes to produce code for. You can use regular expressions here. When testing the regular
# expression, it will be enclosed in "^$", like this: "^Menu.*$".

classes = GFXDevice GFXBindingLayout GFXBuffer GFXCommandBuffer GFXFramebuffer GFXInputAssembler GFXPipelineLayout GFXPipelineState GFXQueue GFXRenderPass GFXSampler GFXShader GFXTexture GFXTextureView GFXWindow GFXAPI GFXFeature GFXFormat GFXFormatType GFXType GFXBufferUsageBit GFXBufferFlagBit GFXBufferAccessBit GFXMemoryUsageBit GFXTextureType GFXTextureUsageBit GFXTextureFlagBit GFXSampleCount GFXTextureViewType GFXFilter GFXAddress GFXComparisonFunc GFXStencilOp GFXBlendFactor GFXBlendOp GFXColorMask GFXShaderType GFXLoadOp GFXStoreOp GFXTextureLayout GFXPipelineBindPoint GFXPrimitiveMode GFXPolygonMode GFXShadeModel GFXCullMode GFXDynamicState GFXStencilFace GFXBindingType GFXQueueType GFXCommandBufferType GFXClearFlagBit GFXVsyncMode GFXOffset GFXRect GFXExtent GFXTextureSubres GFXTextureCopy GFXBufferTextureCopy GFXViewport GFXColor GFXDeviceInfo GFXWindowInfo GFXContextInfo GFXBufferInfo GFXDrawInfo GFXIndirectBuffer GFXTextureInfo GFXTextureViewInfo GFXSamplerInfo GFXShaderMacro GFXUniform GFXUniformBlock GFXUniformSampler GFXShaderStage GFXShaderInfo GFXAttribute GFXInputAssemblerInfo GFXColorAttachment GFXDepthStencilAttachment GFXRenderPassInfo GFXFramebufferInfo GFXBinding GFXBindingLayoutInfo GFXBindingUnit GFXPushConstantRange GFXPipelineLayoutInfo GFXInputState GFXRasterizerState GFXDepthStencilState GFXBlendTarget GFXBlendState GFXPipelineStateInfo GFXCommandAllocator GFXCommandAllocatorInfo GFXCommandBufferInfo GFXQueueInfo GFXFormatInfo GFXMemoryStatus GLES2Device GLES2Window

classes_need_extend =

# what should we skip? in the format ClassName::[function function]
# ClassName is a regular expression, but will be used like this: "^ClassName$" functions are also
# regular expressions, they will not be surrounded by "^$". If you want to skip a whole class, just
# add a single "*" as functions. See bellow for several examples. A special class name is "*", which
# will apply to all class names. This is a convenience wildcard to be able to skip similar named
# functions from all classes.

skip = GFXBindingLayout::[GFXBindingLayout],
       GFXBuffer::[GFXBuffer update],
       GFXCommandBuffer::[GFXCommandBuffer execute],
       GFXCommandAllocator::[GFXCommandAllocator],
       GFXFramebuffer::[GFXFramebuffer],
       GFXInputAssembler::[GFXInputAssembler],
       GFXPipelineLayout::[GFXPipelineLayout pushConstantsRanges layouts],
       GFXPipelineState::[GFXPipelineState],
       GFXQueue::[GFXQueue],
       GFXRenderPass::[GFXRenderPass],
       GFXSampler::[GFXSampler],
       GFXShader::[GFXShader],
       GFXTexture::[GFXTexture],
       GFXTextureView::[GFXTextureView],
       GFXWindow::[GFXWindow],
       CCMTLCommandAllocator::[clearCommands],
       GLES2Device::[copyBuffersToTexture],
       GFXDevice::[copyBuffersToTexture],
       GFXBlendState::[targets]

getter_setter = GFXDevice::[width/width height/height nativeWidth/nativeWidth nativeHeight/nativeHeight memoryStatus/memoryStatus context/context mainWindow/mainWindow queue/queue commandAllocator/commandAllocator renderer/renderer vendor/vendor numDrawCalls/numDrawCalls numTris/numTris],
                GFXWindow::[device/device title/title left/left top/top width/width height/height nativeWidth/nativeWidth nativeHeight/nativeHeight colorFormat/colorFormat isOffscreen/isOffscreen renderPass/renderPass colorTexture/colorTexture colorTexView/colorTexView depthStencilTexture/depthStencilTexture depthStencilTexView/depthStencilTexView framebuffer/framebuffer],
                GFXShader::[device/device name/name hash/hash stages/stages blocks/blocks samplers/samplers],
                GFXTextureView::[device/device texture/texture type/type format/format baseLevel/baseLevel levelCount/levelCount baseLayer/baseLayer layerCount/layerCount],
                GFXTexture::[type/type usage/usage format/format width/width height/height depth/depth arrayLayer/arrayLayer mipLevel/mipLevel size/size samples/samples flags/flags buffer/buffer],
                GFXBindingLayout::[device/device bindingUnits/bindingUnits],
                GFXQueue::[device/device type/type],
                GFXRenderPass::[device/device colorAttachments/colorAttachments depthStencilAttachment/depthStencilAttachment subPasses/subPasses],
                GFXPipelineLayout::[device/device],
                GFXPipelineState::[device/device shader/shader primitive/primitive inputState/inputState rasterizerState/rasterizerState depthStencilState/depthStencilState blendState/blendState pipelineLayout/pipelineLayout renderPass/renderPass],
                GFXInputAssembler::[device/device attributes/attributes vertexBuffers/vertexBuffers indexBuffer/indexBuffer indirectBuffer/indirectBuffer vertexCount/vertexCount firstVertex/firstVertex indexCount/indexCount firstIndex/firstIndex vertexOffset/vertexOffset instanceCount/instanceCount firstInstance/firstInstance],
                GFXCommandBuffer::[device/device allocator/allocator type/type numDrawCalls/numDrawCalls numTris/numTris],
                GFXContext::[device/device sharedContext/sharedContext vsyncMode/vsyncMode colorFormat/colorFormat depthStencilFormat/depthStencilFormat],
                GFXFrameBuffer::[device/device renderPass/renderPass colorViews/colorViews depthStencilView/depthStencilView isOffscreen/isOffscreen],
                GFXBuffer::[device/device usage/usage memUsage/memUsage stride/stride count/count size/size flags/flags bufferView/bufferView],
                GFXSampler::[device/device name/name minFilter/minFilter magFilter/magFilter mipFilter/mipFilter addressU/addressU addressV/addressV addressW/addressW maxAnisotropy/maxAnisotropy cmpFunc/cmpFunc borderColor/borderColor minLOD/minLOD maxLOD/maxLOD mipLODBias/mipLODBias]

rename_functions = 

rename_classes =

# for all class names, should we remove something when registering in the target VM?
remove_prefix =

# classes for which there will be no "parent" lookup
classes_have_no_parents = 

# base classes which will be skipped when their sub-classes found them.
base_classes_to_skip = Ref Clonable Object

# classes that create no constructor
# Set is special and we will use a hand-written constructor

abstract_classes = GFXDevice

persistent_classes =

classes_owned_by_cpp =
