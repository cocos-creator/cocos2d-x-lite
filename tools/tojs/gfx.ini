[gfx]
# the prefix to be added to the generated functions. You might or might not use this in your own
# templates
prefix = gfx

# create a target namespace (in javascript, this would create some code like the equiv. to `ns = ns || {}`)
# all classes will be embedded in that namespace
target_namespace = gfx

macro_judgement  =

android_headers =

android_flags = -target armv7-none-linux-androideabi -D_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS -DANDROID -D__ANDROID_API__=14 -gcc-toolchain %(gcc_toolchain_dir)s --sysroot=%(androidndkdir)s/platforms/android-14/arch-arm  -idirafter %(androidndkdir)s/sources/android/support/include -idirafter %(androidndkdir)s/sysroot/usr/include -idirafter %(androidndkdir)s/sysroot/usr/include/arm-linux-androideabi -idirafter %(clangllvmdir)s/lib64/clang/5.0/include -I%(androidndkdir)s/sources/cxx-stl/llvm-libc++/include

clang_headers =
clang_flags = -nostdinc -x c++ -std=c++11 -fsigned-char -U__SSE__

cocos_headers = -I%(cocosdir)s/cocos -I%(cocosdir)s/cocos/renderer -I%(cocosdir)s/cocos/renderer/core-I%(cocosdir)s/cocos/math -I%(cocosdir)s/cocos/platform/android -I%(cocosdir)s/external/source
cocos_flags = -DANDROID -DCC_PLATFORM=3 -DCC_PLATFORM_MAC_IOS=1 -DCC_PLATFORM_MAC_OSX=4 -DCC_PLATFORM_WINDOWS=2 -DCC_PLATFORM_ANDROID=3


cxxgenerator_headers =

# extra arguments for clang
extra_arguments = %(android_headers)s %(clang_headers)s %(cxxgenerator_headers)s %(cocos_headers)s %(android_flags)s %(clang_flags)s %(cocos_flags)s %(extra_flags)s

# what headers to parse
headers = %(cocosdir)s/cocos/renderer/core/Core.h

replace_headers =

# what classes to produce code for. You can use regular expressions here. When testing the regular
# expression, it will be enclosed in "^$", like this: "^Menu.*$".

classes = GFXObject Device BindingLayout Buffer CommandBuffer Framebuffer InputAssembler PipelineLayout PipelineState Fence Queue RenderPass Sampler Shader Texture API Feature Format FormatType Type BufferUsageBit BufferFlagBit BufferAccessBit GFXMemoryUsageBit TextureUsageBit TextureFlagBit ShaderType TextureLayout GFXDynamicState GFXStencilFace GFXBindingType QueueType CommandBufferType GFXClearFlagBit GFXVsyncMode GFXOffset GFXRect GFXExtent TextureSubres TextureCopy BufferTextureCopy GFXViewport GFXColor DeviceInfo ContextInfo BufferInfo GFXDrawInfo IndirectBuffer TextureInfo TextureViewInfo SamplerInfo ShaderMacro GFXUniform GFXUniformBlock GFXUniformSampler ShaderStage ShaderInfo GFXAttribute InputAssemblerInfo GFXColorAttachment GFXDepthStencilAttachment RenderPassInfo FramebufferInfo GFXBinding BindingLayoutInfo GFXBindingUnit GFXPushConstantRange PipelineLayoutInfo GFXInputState GFXRasterizerState GFXDepthStencilState GFXBlendTarget GFXBlendState PipelineStateInfo CommandAllocator CommandAllocatorInfo CommandBufferInfo QueueInfo FormatInfo GFXObjectType GFXStatus GFXMemoryStatus

classes_need_extend =

# what should we skip? in the format ClassName::[function function]
# ClassName is a regular expression, but will be used like this: "^ClassName$" functions are also
# regular expressions, they will not be surrounded by "^$". If you want to skip a whole class, just
# add a single "*" as functions. See bellow for several examples. A special class name is "*", which
# will apply to all class names. This is a convenience wildcard to be able to skip similar named
# functions from all classes.

skip = BindingLayout::[BindingLayout],
       Buffer::[Buffer update],
       CommandBuffer::[CommandBuffer execute],
       CommandAllocator::[CommandAllocator],
       Framebuffer::[Framebuffer],
       InputAssembler::[InputAssembler extractDrawInfo],
       PipelineLayout::[PipelineLayout pushConstantsRanges layouts],
       PipelineState::[PipelineState],
       Fence::[Fence],
       Queue::[Queue],
       RenderPass::[RenderPass],
       Sampler::[Sampler],
       Shader::[Shader],
       Texture::[Texture initialize],
       CCMTLCommandAllocator::[clearCommands],
       Device::[copyBuffersToTexture createTexture],
       GFXBlendState::[targets]

getter_setter = Device::[gfxAPI deviceName width height nativeWidth nativeHeight memoryStatus context queue commandAllocator renderer vendor numDrawCalls numInstances numTris maxVertexAttributes maxVertexUniformVectors maxFragmentUniformVectors maxTextureUnits maxVertexTextureUnits maxUniformBufferBindings maxUniformBlockSize maxTextureSize maxCubeMapTextureSize depthBits stencilBits reverseCW shaderIdGen colorFormat depthStencilFormat minClipZ projectionSignY],
                Shader::[device name hash stages attributes blocks samplers],
                Texture::[type usage format width height depth arrayLayer mipLevel size samples flags buffer],
                BindingLayout::[device bindingUnits],
                Queue::[device type],
                RenderPass::[device colorAttachments depthStencilAttachment subPasses hash],
                PipelineLayout::[device],
                PipelineState::[device shader primitive inputState rasterizerState depthStencilState blendState pipelineLayout renderPass],
                InputAssembler::[device vertexBuffers attributes indexBuffer indirectBuffer vertexCount firstVertex indexCount firstIndex vertexOffset instanceCount firstInstance attributesHash],
                GFXCommanduffer::[device allocator type numDrawCalls numInstances numTris],
                Context::[device sharedContext/sharedContext vsyncMode colorFormat depthStencilFormat],
                Framebuffer::[device renderPass colorTextures depthStencilTexture isOffscreen/isOffscreen],
                Buffer::[device usage memUsage stride count size flags bufferView],
                Sampler::[device name minFilter magFilter mipFilter addressU addressV addressW maxAnisotropy cmpFunc borderColor minLOD maxLOD mipLODBias],
                GFXObject::[status Type/getType]

rename_functions =

rename_classes = Device::GFXDevice

# for all class names, should we remove something when registering in the target VM?
remove_prefix =

# classes for which there will be no "parent" lookup
classes_have_no_parents =

# base classes which will be skipped when their sub-classes found them.
base_classes_to_skip = Ref Clonable Object

# classes that create no constructor
# Set is special and we will use a hand-written constructor
abstract_classes = Device

persistent_classes =

classes_owned_by_cpp =
